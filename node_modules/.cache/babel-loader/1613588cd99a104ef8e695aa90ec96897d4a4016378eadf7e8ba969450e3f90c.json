{"ast":null,"code":"const handleRemoveBackground = async () => {\n  if (!videoFile) return;\n  setLoading(true);\n  const formData = new FormData();\n  formData.append(\"video\", videoFile);\n  try {\n    const res = await axios.post(\"http://localhost:8000/remove-background\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      },\n      responseType: \"blob\",\n      validateStatus: () => true // Allow handling all status codes manually\n    });\n    if (res.status !== 200) {\n      // Try to parse error response\n      const errorText = await res.data.text();\n      let errorMsg;\n      try {\n        const json = JSON.parse(errorText);\n        errorMsg = json.detail || \"Unknown error\";\n      } catch {\n        errorMsg = errorText || \"Server returned an unknown error.\";\n      }\n      throw new Error(errorMsg);\n    }\n    const blob = new Blob([res.data], {\n      type: \"video/mp4\"\n    });\n    const videoUrl = URL.createObjectURL(blob);\n    setOutputVideo(videoUrl);\n  } catch (err) {\n    console.error(\"❌ Background removal failed:\", err);\n    alert(\"Background removal failed:\\n\" + err.message);\n  } finally {\n    setLoading(false);\n  }\n};","map":{"version":3,"names":["handleRemoveBackground","videoFile","setLoading","formData","FormData","append","res","axios","post","headers","responseType","validateStatus","status","errorText","data","text","errorMsg","json","JSON","parse","detail","Error","blob","Blob","type","videoUrl","URL","createObjectURL","setOutputVideo","err","console","error","alert","message"],"sources":["D:/github/gen-ai-video-editor_Ai-Ml_028/src/components/video_editor.js"],"sourcesContent":["const handleRemoveBackground = async () => {\r\n  if (!videoFile) return;\r\n\r\n  setLoading(true);\r\n  const formData = new FormData();\r\n  formData.append(\"video\", videoFile);\r\n\r\n  try {\r\n    const res = await axios.post(\"http://localhost:8000/remove-background\", formData, {\r\n      headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      responseType: \"blob\",\r\n      validateStatus: () => true,  // Allow handling all status codes manually\r\n    });\r\n\r\n    if (res.status !== 200) {\r\n      // Try to parse error response\r\n      const errorText = await res.data.text();\r\n      let errorMsg;\r\n      try {\r\n        const json = JSON.parse(errorText);\r\n        errorMsg = json.detail || \"Unknown error\";\r\n      } catch {\r\n        errorMsg = errorText || \"Server returned an unknown error.\";\r\n      }\r\n      throw new Error(errorMsg);\r\n    }\r\n\r\n    const blob = new Blob([res.data], { type: \"video/mp4\" });\r\n    const videoUrl = URL.createObjectURL(blob);\r\n    setOutputVideo(videoUrl);\r\n  } catch (err) {\r\n    console.error(\"❌ Background removal failed:\", err);\r\n    alert(\"Background removal failed:\\n\" + err.message);\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,sBAAsB,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI,CAACC,SAAS,EAAE;EAEhBC,UAAU,CAAC,IAAI,CAAC;EAChB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,SAAS,CAAC;EAEnC,IAAI;IACF,MAAMK,GAAG,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,yCAAyC,EAAEL,QAAQ,EAAE;MAChFM,OAAO,EAAE;QAAE,cAAc,EAAE;MAAsB,CAAC;MAClDC,YAAY,EAAE,MAAM;MACpBC,cAAc,EAAEA,CAAA,KAAM,IAAI,CAAG;IAC/B,CAAC,CAAC;IAEF,IAAIL,GAAG,CAACM,MAAM,KAAK,GAAG,EAAE;MACtB;MACA,MAAMC,SAAS,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAACC,IAAI,CAAC,CAAC;MACvC,IAAIC,QAAQ;MACZ,IAAI;QACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACN,SAAS,CAAC;QAClCG,QAAQ,GAAGC,IAAI,CAACG,MAAM,IAAI,eAAe;MAC3C,CAAC,CAAC,MAAM;QACNJ,QAAQ,GAAGH,SAAS,IAAI,mCAAmC;MAC7D;MACA,MAAM,IAAIQ,KAAK,CAACL,QAAQ,CAAC;IAC3B;IAEA,MAAMM,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACjB,GAAG,CAACQ,IAAI,CAAC,EAAE;MAAEU,IAAI,EAAE;IAAY,CAAC,CAAC;IACxD,MAAMC,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;IAC1CM,cAAc,CAACH,QAAQ,CAAC;EAC1B,CAAC,CAAC,OAAOI,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEF,GAAG,CAAC;IAClDG,KAAK,CAAC,8BAA8B,GAAGH,GAAG,CAACI,OAAO,CAAC;EACrD,CAAC,SAAS;IACR/B,UAAU,CAAC,KAAK,CAAC;EACnB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}